{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, vModelText as _vModelText, withDirectives as _withDirectives, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-469af010\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = [\"onClick\"];\nconst _hoisted_2 = [\"onClick\"];\nconst _hoisted_3 = [\"onClick\"];\nconst _hoisted_4 = {\n  key: 0\n};\nconst _hoisted_5 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"h2\", null, \"Editar Nota\", -1 /* HOISTED */));\nconst _hoisted_6 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"label\", {\n  for: \"editTitle\"\n}, \"Título:\", -1 /* HOISTED */));\nconst _hoisted_7 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"label\", {\n  for: \"editDescription\"\n}, \"Descripción:\", -1 /* HOISTED */));\nconst _hoisted_8 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"label\", {\n  for: \"editCategories\"\n}, \"Categorías (Separadas por comas):\", -1 /* HOISTED */));\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_createCommentVNode(\" Mostrar todas las notas \"), _createElementVNode(\"ul\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.notes, note => {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: note.idNote\n    }, [_createElementVNode(\"h2\", null, _toDisplayString(note.title), 1 /* TEXT */), _createElementVNode(\"p\", null, _toDisplayString(note.description), 1 /* TEXT */), _createElementVNode(\"ul\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(note.categories, category => {\n      return _openBlock(), _createElementBlock(\"li\", {\n        key: category.idCategory\n      }, _toDisplayString(category.nameCategory), 1 /* TEXT */);\n    }), 128 /* KEYED_FRAGMENT */))]), _createElementVNode(\"p\", null, _toDisplayString(note.createdAt), 1 /* TEXT */), _createElementVNode(\"button\", {\n      onClick: $event => $options.openEditDialog(note)\n    }, \"Editar\", 8 /* PROPS */, _hoisted_1), _createElementVNode(\"button\", {\n      onClick: $event => $options.deleteNote(note.idNote)\n    }, \"Eliminar\", 8 /* PROPS */, _hoisted_2), _createElementVNode(\"button\", {\n      onClick: $event => $options.archiveNote(note.idNote)\n    }, _toDisplayString(note.archived ? 'Desarchivar' : 'Archivar'), 9 /* TEXT, PROPS */, _hoisted_3)]);\n  }), 128 /* KEYED_FRAGMENT */))]), _createCommentVNode(\" Componente de edición \"), $data.isEditDialogVisible ? (_openBlock(), _createElementBlock(\"div\", _hoisted_4, [_hoisted_5, _hoisted_6, _withDirectives(_createElementVNode(\"input\", {\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.editNote.title = $event),\n    type: \"text\",\n    id: \"editTitle\",\n    required: \"\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.editNote.title]]), _hoisted_7, _withDirectives(_createElementVNode(\"textarea\", {\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $data.editNote.description = $event),\n    id: \"editDescription\",\n    required: \"\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.editNote.description]]), _hoisted_8, _withDirectives(_createElementVNode(\"input\", {\n    \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => $data.editNote.categoriesString = $event),\n    type: \"text\",\n    id: \"editCategories\",\n    required: \"\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.editNote.categoriesString]]), _createElementVNode(\"button\", {\n    onClick: _cache[3] || (_cache[3] = (...args) => $options.saveEdit && $options.saveEdit(...args))\n  }, \"Guardar\"), _createElementVNode(\"button\", {\n    onClick: _cache[4] || (_cache[4] = (...args) => $options.cancelEdit && $options.cancelEdit(...args))\n  }, \"Cancelar\")])) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"names":["_createElementVNode","for","_createElementBlock","_createCommentVNode","_Fragment","_renderList","$data","notes","note","key","idNote","_toDisplayString","title","description","categories","category","idCategory","nameCategory","createdAt","onClick","$event","$options","openEditDialog","_hoisted_1","deleteNote","_hoisted_2","archiveNote","archived","_hoisted_3","isEditDialogVisible","_hoisted_4","_hoisted_5","_hoisted_6","editNote","type","id","required","_hoisted_7","_hoisted_8","categoriesString","_cache","args","saveEdit","cancelEdit"],"sources":["C:\\Users\\ricar\\Downloads\\Java-Otros\\frontend\\src\\components\\HelloWorld.vue"],"sourcesContent":["<template>\n  <div>    \n    <!-- Mostrar todas las notas -->\n    <ul>\n      <li v-for=\"note in notes\" :key=\"note.idNote\">\n        <h2>{{ note.title }}</h2>\n        <p>{{ note.description }}</p>\n        <ul>\n          <li v-for=\"category in note.categories\" :key=\"category.idCategory\">\n            {{ category.nameCategory }}\n          </li>\n        </ul>\n        <p>{{ note.createdAt }}</p>\n        <button @click=\"openEditDialog(note)\">Editar</button>\n        <button @click=\"deleteNote(note.idNote)\">Eliminar</button>\n        <button @click=\"archiveNote(note.idNote)\">{{ note.archived ? 'Desarchivar' : 'Archivar' }}</button>\n      </li>\n    </ul>\n\n    <!-- Componente de edición -->\n    <div v-if=\"isEditDialogVisible\">\n      <h2>Editar Nota</h2>\n      <label for=\"editTitle\">Título:</label>\n      <input v-model=\"editNote.title\" type=\"text\" id=\"editTitle\" required>\n      <label for=\"editDescription\">Descripción:</label>\n      <textarea v-model=\"editNote.description\" id=\"editDescription\" required></textarea>\n      <label for=\"editCategories\">Categorías (Separadas por comas):</label>\n      <input v-model=\"editNote.categoriesString\" type=\"text\" id=\"editCategories\" required>\n      <button @click=\"saveEdit\">Guardar</button>\n      <button @click=\"cancelEdit\">Cancelar</button>\n    </div>\n\n  </div>\n</template>\n\n<script>\nimport { backendUrl } from '@/config.js';\nimport axios from 'axios';\nimport { ref } from 'vue';\n\nexport default {\n  data() {\n    return {\n      notes: [],\n      newNote: {\n        title: '',\n        description: '',\n        categories: '',\n      },\n      editNote: {\n        idNote: null,\n        title: '',\n        description: '',\n        categories: [],\n        categoriesString: '',\n      },\n      isEditDialogVisible: false,\n      isCreateDialogVisible: false,\n      filterCategory: '',\n      originalNotes: [],\n      selectedStatus: 'active',\n    };\n  },\n  mounted() {\n    this.getNotes();\n  },\n  methods: {\n    async openCreateDialog() {\n      try {\n        this.isCreateDialogVisible = true;\n      } catch (error) {\n        console.error('Error fetching all notes:', error);\n      }\n    },\n    cancelCreate() {\n      this.isCreateDialogVisible = false;\n    },\n    async getNotes() {\n      try {\n        let apiUrl = `${backendUrl}/api/notes-spa`;\n\n        if (this.selectedStatus === 'active' || this.selectedStatus === 'archived') {\n          apiUrl += `?status=${this.selectedStatus}`;\n        }\n\n        const response = await axios.get(apiUrl);\n        this.notes = response.data;\n        this.originalNotes = [...this.notes];\n\n      } catch (error) {\n        console.error('Error fetching all notes:', error);\n      }\n    },\n    async createNote() {\n      try {\n        const categoriesArray = this.newNote.categories.split(',').map(category => ({ nameCategory: category.trim() }))\n        const noteData = JSON.stringify({\n          title: this.newNote.title,\n          description: this.newNote.description,\n          categories: categoriesArray,\n        });\n        \n        const response = await axios.post(`${backendUrl}/api/notes-spa`,\n                                          noteData,\n                                          {headers: {'Content-Type': 'application/json', 'Accept': 'application/json'}}\n                                          );\n\n        this.notes.push(response.data);\n\n        this.newNote = {\n          title: '',\n          description: '',\n          categories: '',\n        };\n        this.isCreateDialogVisible = false;\n      } catch (error) {\n        console.error('Error creating note:', error);\n      }\n    },\n\n    // Método para abrir el componente de edición\n    async openEditDialog(note) {\n      const id = note.idNote;\n      try {\n        const response = await axios.get(`${backendUrl}/api/notes-spa/${id}/`);\n        const noteReponse = response.data;\n\n        // Asignar los valores de la nota obtenida a editNote\n        this.editNote = {\n          idNote: noteReponse.idNote,\n          title: noteReponse.title,\n          description: noteReponse.description,\n          categories: noteReponse.categories,\n          categoriesString: noteReponse.categories.map(category => category.nameCategory).join(','),\n        };\n\n        this.isEditDialogVisible = true;\n\n      } catch (error) {\n        console.error('Error fetching all notes:', error);\n      }\n    },\n    // Método para guardar la edición\n    async saveEdit() {\n      try {\n        // Actualizar el array de categorías a partir de la cadena\n        this.editNote.categories = this.editNote.categoriesString.split(',').map(category => ({ nameCategory: category.trim() }));\n\n        const noteData = JSON.stringify({\n          idNote: this.editNote.idNote,\n          title: this.editNote.title,\n          description: this.editNote.description,\n          categories: this.editNote.categories,\n        });\n\n        const response = await axios.put(`${backendUrl}/api/notes-spa`,\n                                         noteData,\n                                         {headers:{'Content-Type':'application/json','Accept':'application/json'}\n                                        });\n\n        // Actualizar la nota en la lista local\n        const updatedNoteIndex = this.notes.findIndex(note => note.idNote === this.editNote.idNote);\n        if (updatedNoteIndex !== -1) {\n          this.notes[updatedNoteIndex] = response.data;\n        }\n\n        // Después de guardar, oculta el diálogo de edición\n        this.isEditDialogVisible = false;\n      } catch (error) {\n        console.error('Error updating note:', error);\n      }\n    },\n    // Método para cancelar la edición\n    cancelEdit() {\n      this.isEditDialogVisible = false;\n    },\n\n    async filterByCategory() {\n      try {\n        const response = await axios.get(`${backendUrl}/api/notes-spa/${this.filterCategory}`);\n        this.notes = response.data;\n      } catch (error) {\n        console.error('Error fetching notes by category:', error);\n      }\n    },\n\n    // Método para limpiar el filtro y mostrar todas las notas\n    clearFilter() {\n      this.notes = [...this.originalNotes];  // Restaurar la lista original de notas\n      this.filterCategory = '';  // Limpiar el valor de la categoría de filtrado\n    },\n    \n    async deleteNote(noteId) {\n      try {\n        await axios.delete(`${backendUrl}/api/notes-spa/${noteId}`);\n        // Filtrar las notas para excluir la eliminada\n        this.notes = this.notes.filter(note => note.idNote !== noteId);\n      } catch (error) {\n        console.error('Error deleting note:', error);\n      }\n    },\n\n    async archiveNote(noteId) {\n      try {\n        const response = await axios.put(`${backendUrl}/api/notes-spa/archive/${noteId}`);\n        // Update the note in the local list with the response data\n        const updatedNote = response.data;\n        const noteIndex = this.notes.findIndex(note => note.idNote === noteId);\n\n        if (noteIndex !== -1) {\n          this.notes[noteIndex] = ref(updatedNote);\n        }\n        this.getNotes();\n      } catch (error) {\n        console.error('Error archiving/unarchiving note:', error);\n      }\n    }\n  },\n  watch: {\n    selectedCategory() {\n      this.getNotes();\n    },\n    selectedStatus() {\n      if (this.selectedStatus === 'active') {\n        this.notes = this.notes.filter(note => !note.isArchived);\n      } else if (this.selectedStatus === 'archived') {\n        this.notes = this.notes.filter(note => note.isArchived);\n      } else {\n        this.notes = this.originalNotes;\n      }\n    },\n  },\n};\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped>\nh3 {\n  margin: 40px 0 0;\n}\nul {\n  list-style-type: none;\n  padding: 0;\n}\nli {\n  display: inline-block;\n  margin: 0 10px;\n}\na {\n  color: #42b983;\n}\n\n\n</style>\n"],"mappings":";;;;;;;;gEAqBMA,mBAAA,CAAoB,YAAhB,aAAW;gEACfA,mBAAA,CAAsC;EAA/BC,GAAG,EAAC;AAAW,GAAC,SAAO;gEAE9BD,mBAAA,CAAiD;EAA1CC,GAAG,EAAC;AAAiB,GAAC,cAAY;gEAEzCD,mBAAA,CAAqE;EAA9DC,GAAG,EAAC;AAAgB,GAAC,mCAAiC;;uBAzBjEC,mBAAA,CA+BM,cA9BJC,mBAAA,6BAAgC,EAChCH,mBAAA,CAcK,c,kBAbHE,mBAAA,CAYKE,SAAA,QAAAC,WAAA,CAZcC,KAAA,CAAAC,KAAK,EAAbC,IAAI;yBAAfN,mBAAA,CAYK;MAZsBO,GAAG,EAAED,IAAI,CAACE;QACnCV,mBAAA,CAAyB,YAAAW,gBAAA,CAAlBH,IAAI,CAACI,KAAK,kBACjBZ,mBAAA,CAA6B,WAAAW,gBAAA,CAAvBH,IAAI,CAACK,WAAW,kBACtBb,mBAAA,CAIK,c,kBAHHE,mBAAA,CAEKE,SAAA,QAAAC,WAAA,CAFkBG,IAAI,CAACM,UAAU,EAA3BC,QAAQ;2BAAnBb,mBAAA,CAEK;QAFoCO,GAAG,EAAEM,QAAQ,CAACC;0BAClDD,QAAQ,CAACE,YAAY;sCAG5BjB,mBAAA,CAA2B,WAAAW,gBAAA,CAArBH,IAAI,CAACU,SAAS,kBACpBlB,mBAAA,CAAqD;MAA5CmB,OAAK,EAAAC,MAAA,IAAEC,QAAA,CAAAC,cAAc,CAACd,IAAI;OAAG,QAAM,iBAAAe,UAAA,GAC5CvB,mBAAA,CAA0D;MAAjDmB,OAAK,EAAAC,MAAA,IAAEC,QAAA,CAAAG,UAAU,CAAChB,IAAI,CAACE,MAAM;OAAG,UAAQ,iBAAAe,UAAA,GACjDzB,mBAAA,CAAmG;MAA1FmB,OAAK,EAAAC,MAAA,IAAEC,QAAA,CAAAK,WAAW,CAAClB,IAAI,CAACE,MAAM;wBAAMF,IAAI,CAACmB,QAAQ,qDAAAC,UAAA,E;oCAI9DzB,mBAAA,2BAA8B,EACnBG,KAAA,CAAAuB,mBAAmB,I,cAA9B3B,mBAAA,CAUM,OAAA4B,UAAA,GATJC,UAAoB,EACpBC,UAAsC,E,gBACtChC,mBAAA,CAAoE;+DAApDM,KAAA,CAAA2B,QAAQ,CAACrB,KAAK,GAAAQ,MAAA;IAAEc,IAAI,EAAC,MAAM;IAACC,EAAE,EAAC,WAAW;IAACC,QAAQ,EAAR;iDAA3C9B,KAAA,CAAA2B,QAAQ,CAACrB,KAAK,E,GAC9ByB,UAAiD,E,gBACjDrC,mBAAA,CAAkF;+DAA/DM,KAAA,CAAA2B,QAAQ,CAACpB,WAAW,GAAAO,MAAA;IAAEe,EAAE,EAAC,iBAAiB;IAACC,QAAQ,EAAR;iDAA3C9B,KAAA,CAAA2B,QAAQ,CAACpB,WAAW,E,GACvCyB,UAAqE,E,gBACrEtC,mBAAA,CAAoF;+DAApEM,KAAA,CAAA2B,QAAQ,CAACM,gBAAgB,GAAAnB,MAAA;IAAEc,IAAI,EAAC,MAAM;IAACC,EAAE,EAAC,gBAAgB;IAACC,QAAQ,EAAR;iDAA3D9B,KAAA,CAAA2B,QAAQ,CAACM,gBAAgB,E,GACzCvC,mBAAA,CAA0C;IAAjCmB,OAAK,EAAAqB,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEpB,QAAA,CAAAqB,QAAA,IAAArB,QAAA,CAAAqB,QAAA,IAAAD,IAAA,CAAQ;KAAE,SAAO,GACjCzC,mBAAA,CAA6C;IAApCmB,OAAK,EAAAqB,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEpB,QAAA,CAAAsB,UAAA,IAAAtB,QAAA,CAAAsB,UAAA,IAAAF,IAAA,CAAU;KAAE,UAAQ,E"},"metadata":{},"sourceType":"module","externalDependencies":[]}