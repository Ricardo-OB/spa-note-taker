{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { backendUrl } from '@/config.js';\nimport axios from 'axios';\nexport default {\n  data() {\n    return {\n      notes: [],\n      newNote: {\n        title: '',\n        description: '',\n        categories: ''\n      },\n      editNote: {\n        idNote: null,\n        title: '',\n        description: '',\n        categories: []\n      }\n    };\n  },\n  mounted() {\n    this.getNotes();\n  },\n  methods: {\n    async getNotes() {\n      try {\n        const response = await axios.get(`${backendUrl}/api/notes-spa`);\n        this.notes = response.data;\n      } catch (error) {\n        console.error('Error fetching all notes:', error);\n      }\n    },\n    async createNote() {\n      try {\n        const categoriesArray = this.newNote.categories.split(',').map(category => ({\n          nameCategory: category.trim()\n        }));\n        const noteData = JSON.stringify({\n          title: this.newNote.title,\n          description: this.newNote.description,\n          categories: categoriesArray\n        });\n        const response = await axios.post(`${backendUrl}/api/notes-spa`, noteData, {\n          headers: {\n            'Content-Type': 'application/json',\n            'Accept': 'application/json'\n          }\n        });\n        this.notes.push(response.data);\n        this.newNote = {\n          title: '',\n          description: '',\n          categories: ''\n        };\n      } catch (error) {\n        console.error('Error creating note:', error);\n      }\n    },\n    openEditDialog(note) {\n      this.editNote = {\n        ...note\n      }; // Clonar la nota para evitar modificaciones directas\n      this.$modal.show('edit-modal');\n    },\n    saveEdit() {\n      // Lógica para enviar la solicitud de edición al backend\n      // Similar al método createNote\n      this.$modal.hide('edit-modal');\n    },\n    async deleteNote(noteId) {\n      try {\n        await axios.delete(`${backendUrl}/api/notes-spa/${noteId}`);\n        // Filtrar las notas para excluir la eliminada\n        this.notes = this.notes.filter(note => note.idNote !== noteId);\n      } catch (error) {\n        console.error('Error deleting note:', error);\n      }\n    }\n  },\n  watch: {\n    selectedCategory() {\n      this.getNotes();\n    }\n  }\n};","map":{"version":3,"names":["backendUrl","axios","data","notes","newNote","title","description","categories","editNote","idNote","mounted","getNotes","methods","response","get","error","console","createNote","categoriesArray","split","map","category","nameCategory","trim","noteData","JSON","stringify","post","headers","push","openEditDialog","note","$modal","show","saveEdit","hide","deleteNote","noteId","delete","filter","watch","selectedCategory"],"sources":["src/components/HelloWorld.vue"],"sourcesContent":["<template>\n  <div>\n    <h1>Notes. {{ msg }}</h1>\n    \n    <!-- Agregar formulario para crear una nueva nota -->\n    <form @submit.prevent=\"createNote\">\n      <h2>Nueva Nota</h2>\n      <label for=\"title\">Título:</label>\n      <input v-model=\"newNote.title\" type=\"text\" required>\n      <label for=\"description\">Descripción:</label>\n      <textarea v-model=\"newNote.description\" required></textarea>\n      <label for=\"categories\">Categorías (Separadas por comas):</label>\n      <input v-model=\"newNote.categories\" type=\"text\" required>\n      <button type=\"submit\">Guardar</button>\n    </form>\n    \n    <!-- Mostrar todas las notas -->\n    <ul>\n      <li v-for=\"note in notes\" :key=\"note.idNote\">\n        <h2>{{ note.title }}</h2>\n        <p>{{ note.description }}</p>\n        <ul>\n          <li v-for=\"category in note.categories\" :key=\"category.idCategory\">\n            {{ category.nameCategory }}\n          </li>\n        </ul>\n        <p>{{ note.createdAt }}</p>\n        <button @click=\"openEditDialog(note)\">Editar</button>\n        <button @click=\"deleteNote(note.idNote)\">Eliminar</button>\n      </li>\n    </ul>\n\n    <!-- Modal de edición -->\n    <modal name=\"edit-modal\">\n      <h2>Editar Nota</h2>\n      <label for=\"editTitle\">Título:</label>\n      <input v-model=\"editNote.title\" type=\"text\" id=\"editTitle\" required>\n      <label for=\"editDescription\">Descripción:</label>\n      <textarea v-model=\"editNote.description\" id=\"editDescription\" required></textarea>\n      <label for=\"editCategories\">Categorías (Separadas por comas):</label>\n      <input v-model=\"editNote.categories\" type=\"text\" id=\"editCategories\" required>\n      <button @click=\"saveEdit\">Guardar</button>\n    </modal>\n\n  </div>\n</template>\n\n<script>\nimport { backendUrl } from '@/config.js';\nimport axios from 'axios';\n\nexport default {\n  data() {\n    return {\n      notes: [],\n      newNote: {\n        title: '',\n        description: '',\n        categories: '',\n      },\n      editNote: {\n        idNote: null,\n        title: '',\n        description: '',\n        categories: [],\n      },\n    };\n  },\n  mounted() {\n    this.getNotes();\n  },\n  methods: {\n    async getNotes() {\n      try {\n        const response = await axios.get(`${backendUrl}/api/notes-spa`);\n        this.notes = response.data;\n      } catch (error) {\n        console.error('Error fetching all notes:', error);\n      }\n    },\n    async createNote() {\n      try {\n        const categoriesArray = this.newNote.categories.split(',').map(category => ({ nameCategory: category.trim() }))\n        const noteData = JSON.stringify({\n          title: this.newNote.title,\n          description: this.newNote.description,\n          categories: categoriesArray,\n        });\n        \n        const response = await axios.post(`${backendUrl}/api/notes-spa`,\n                                          noteData,\n                                          {headers: {'Content-Type': 'application/json', 'Accept': 'application/json'}}\n                                          );\n\n        this.notes.push(response.data);\n\n        this.newNote = {\n          title: '',\n          description: '',\n          categories: '',\n        };\n      } catch (error) {\n        console.error('Error creating note:', error);\n      }\n    },\n    openEditDialog(note) {\n      this.editNote = { ...note }; // Clonar la nota para evitar modificaciones directas\n      this.$modal.show('edit-modal');\n    },\n    saveEdit() {\n      // Lógica para enviar la solicitud de edición al backend\n      // Similar al método createNote\n      this.$modal.hide('edit-modal');\n    },\n    async deleteNote(noteId) {\n      try {\n        await axios.delete(`${backendUrl}/api/notes-spa/${noteId}`);\n        // Filtrar las notas para excluir la eliminada\n        this.notes = this.notes.filter(note => note.idNote !== noteId);\n      } catch (error) {\n        console.error('Error deleting note:', error);\n      }\n    },\n  },\n  watch: {\n    selectedCategory() {\n      this.getNotes();\n    },\n  },\n};\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped>\nh3 {\n  margin: 40px 0 0;\n}\nul {\n  list-style-type: none;\n  padding: 0;\n}\nli {\n  display: inline-block;\n  margin: 0 10px;\n}\na {\n  color: #42b983;\n}\n</style>\n"],"mappings":";AAgDA,SAAAA,UAAA;AACA,OAAAC,KAAA;AAEA;EACAC,KAAA;IACA;MACAC,KAAA;MACAC,OAAA;QACAC,KAAA;QACAC,WAAA;QACAC,UAAA;MACA;MACAC,QAAA;QACAC,MAAA;QACAJ,KAAA;QACAC,WAAA;QACAC,UAAA;MACA;IACA;EACA;EACAG,QAAA;IACA,KAAAC,QAAA;EACA;EACAC,OAAA;IACA,MAAAD,SAAA;MACA;QACA,MAAAE,QAAA,SAAAZ,KAAA,CAAAa,GAAA,IAAAd,UAAA;QACA,KAAAG,KAAA,GAAAU,QAAA,CAAAX,IAAA;MACA,SAAAa,KAAA;QACAC,OAAA,CAAAD,KAAA,8BAAAA,KAAA;MACA;IACA;IACA,MAAAE,WAAA;MACA;QACA,MAAAC,eAAA,QAAAd,OAAA,CAAAG,UAAA,CAAAY,KAAA,MAAAC,GAAA,CAAAC,QAAA;UAAAC,YAAA,EAAAD,QAAA,CAAAE,IAAA;QAAA;QACA,MAAAC,QAAA,GAAAC,IAAA,CAAAC,SAAA;UACArB,KAAA,OAAAD,OAAA,CAAAC,KAAA;UACAC,WAAA,OAAAF,OAAA,CAAAE,WAAA;UACAC,UAAA,EAAAW;QACA;QAEA,MAAAL,QAAA,SAAAZ,KAAA,CAAA0B,IAAA,IAAA3B,UAAA,kBACAwB,QAAA,EACA;UAAAI,OAAA;YAAA;YAAA;UAAA;QAAA,CACA;QAEA,KAAAzB,KAAA,CAAA0B,IAAA,CAAAhB,QAAA,CAAAX,IAAA;QAEA,KAAAE,OAAA;UACAC,KAAA;UACAC,WAAA;UACAC,UAAA;QACA;MACA,SAAAQ,KAAA;QACAC,OAAA,CAAAD,KAAA,yBAAAA,KAAA;MACA;IACA;IACAe,eAAAC,IAAA;MACA,KAAAvB,QAAA;QAAA,GAAAuB;MAAA;MACA,KAAAC,MAAA,CAAAC,IAAA;IACA;IACAC,SAAA;MACA;MACA;MACA,KAAAF,MAAA,CAAAG,IAAA;IACA;IACA,MAAAC,WAAAC,MAAA;MACA;QACA,MAAApC,KAAA,CAAAqC,MAAA,IAAAtC,UAAA,kBAAAqC,MAAA;QACA;QACA,KAAAlC,KAAA,QAAAA,KAAA,CAAAoC,MAAA,CAAAR,IAAA,IAAAA,IAAA,CAAAtB,MAAA,KAAA4B,MAAA;MACA,SAAAtB,KAAA;QACAC,OAAA,CAAAD,KAAA,yBAAAA,KAAA;MACA;IACA;EACA;EACAyB,KAAA;IACAC,iBAAA;MACA,KAAA9B,QAAA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}