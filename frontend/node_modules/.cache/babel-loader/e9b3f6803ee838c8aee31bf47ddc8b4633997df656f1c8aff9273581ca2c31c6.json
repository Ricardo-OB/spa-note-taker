{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { backendUrl } from '@/config.js';\nimport axios from 'axios';\nimport { ref } from 'vue';\nexport default {\n  data() {\n    return {\n      notes: [],\n      newNote: {\n        title: '',\n        description: '',\n        categories: ''\n      },\n      editNote: {\n        idNote: null,\n        title: '',\n        description: '',\n        categories: [],\n        categoriesString: ''\n      },\n      isEditDialogVisible: false,\n      isCreateDialogVisible: false,\n      filterCategory: '',\n      originalNotes: [],\n      selectedStatus: 'active'\n    };\n  },\n  mounted() {\n    this.getNotes();\n  },\n  methods: {\n    async openCreateDialog() {\n      try {\n        this.isCreateDialogVisible = true;\n      } catch (error) {\n        console.error('Error fetching all notes:', error);\n      }\n    },\n    cancelCreate() {\n      this.isCreateDialogVisible = false;\n      this.newNote = {\n        title: '',\n        description: '',\n        categories: ''\n      };\n    },\n    async getNotes() {\n      try {\n        let apiUrl = `${backendUrl}/api/notes-spa`;\n        if (this.selectedStatus === 'active' || this.selectedStatus === 'archived') {\n          apiUrl += `?status=${this.selectedStatus}`;\n        }\n        const response = await axios.get(apiUrl);\n        this.notes = response.data;\n        this.originalNotes = [...this.notes];\n      } catch (error) {\n        console.error('Error fetching all notes:', error);\n      }\n    },\n    async createNote() {\n      try {\n        const categoriesArray = this.newNote.categories.split(',').map(category => ({\n          nameCategory: category.trim()\n        }));\n        const noteData = JSON.stringify({\n          title: this.newNote.title,\n          description: this.newNote.description,\n          categories: categoriesArray\n        });\n        const response = await axios.post(`${backendUrl}/api/notes-spa`, noteData, {\n          headers: {\n            'Content-Type': 'application/json',\n            'Accept': 'application/json'\n          }\n        });\n        this.notes.push(response.data);\n        this.newNote = {\n          title: '',\n          description: '',\n          categories: ''\n        };\n        this.isCreateDialogVisible = false;\n      } catch (error) {\n        console.error('Error creating note:', error);\n      }\n    },\n    // Método para abrir el componente de edición\n    async openEditDialog(note) {\n      const id = note.idNote;\n      try {\n        const response = await axios.get(`${backendUrl}/api/notes-spa/${id}/`);\n        const noteReponse = response.data;\n\n        // Asignar los valores de la nota obtenida a editNote\n        this.editNote = {\n          idNote: noteReponse.idNote,\n          title: noteReponse.title,\n          description: noteReponse.description,\n          categories: noteReponse.categories,\n          categoriesString: noteReponse.categories.map(category => category.nameCategory).join(',')\n        };\n        this.isEditDialogVisible = true;\n      } catch (error) {\n        console.error('Error fetching all notes:', error);\n      }\n    },\n    // Método para guardar la edición\n    async saveEdit() {\n      try {\n        // Actualizar el array de categorías a partir de la cadena\n        this.editNote.categories = this.editNote.categoriesString.split(',').map(category => ({\n          nameCategory: category.trim()\n        }));\n        const noteData = JSON.stringify({\n          idNote: this.editNote.idNote,\n          title: this.editNote.title,\n          description: this.editNote.description,\n          categories: this.editNote.categories\n        });\n        const response = await axios.put(`${backendUrl}/api/notes-spa`, noteData, {\n          headers: {\n            'Content-Type': 'application/json',\n            'Accept': 'application/json'\n          }\n        });\n\n        // Actualizar la nota en la lista local\n        const updatedNoteIndex = this.notes.findIndex(note => note.idNote === this.editNote.idNote);\n        if (updatedNoteIndex !== -1) {\n          this.notes[updatedNoteIndex] = response.data;\n        }\n\n        // Después de guardar, oculta el diálogo de edición\n        this.isEditDialogVisible = false;\n      } catch (error) {\n        console.error('Error updating note:', error);\n      }\n    },\n    // Método para cancelar la edición\n    cancelEdit() {\n      this.isEditDialogVisible = false;\n    },\n    async filterByCategory() {\n      try {\n        const response = await axios.get(`${backendUrl}/api/notes-spa/${this.filterCategory}`);\n        this.notes = response.data;\n      } catch (error) {\n        console.error('Error fetching notes by category:', error);\n      }\n    },\n    // Método para limpiar el filtro y mostrar todas las notas\n    clearFilter() {\n      this.notes = [...this.originalNotes]; // Restaurar la lista original de notas\n      this.filterCategory = ''; // Limpiar el valor de la categoría de filtrado\n    },\n    async deleteNote(noteId) {\n      try {\n        await axios.delete(`${backendUrl}/api/notes-spa/${noteId}`);\n        // Filtrar las notas para excluir la eliminada\n        this.notes = this.notes.filter(note => note.idNote !== noteId);\n      } catch (error) {\n        console.error('Error deleting note:', error);\n      }\n    },\n    async archiveNote(noteId) {\n      try {\n        const response = await axios.put(`${backendUrl}/api/notes-spa/archive/${noteId}`);\n        // Update the note in the local list with the response data\n        const updatedNote = response.data;\n        const noteIndex = this.notes.findIndex(note => note.idNote === noteId);\n        if (noteIndex !== -1) {\n          this.notes[noteIndex] = ref(updatedNote);\n        }\n        this.getNotes();\n      } catch (error) {\n        console.error('Error archiving/unarchiving note:', error);\n      }\n    }\n  },\n  watch: {\n    selectedCategory() {\n      this.getNotes();\n    },\n    selectedStatus() {\n      if (this.selectedStatus === 'active') {\n        this.notes = this.notes.filter(note => !note.isArchived);\n      } else if (this.selectedStatus === 'archived') {\n        this.notes = this.notes.filter(note => note.isArchived);\n      } else {\n        this.notes = this.originalNotes;\n      }\n    }\n  }\n};","map":{"version":3,"names":["backendUrl","axios","ref","data","notes","newNote","title","description","categories","editNote","idNote","categoriesString","isEditDialogVisible","isCreateDialogVisible","filterCategory","originalNotes","selectedStatus","mounted","getNotes","methods","openCreateDialog","error","console","cancelCreate","apiUrl","response","get","createNote","categoriesArray","split","map","category","nameCategory","trim","noteData","JSON","stringify","post","headers","push","openEditDialog","note","id","noteReponse","join","saveEdit","put","updatedNoteIndex","findIndex","cancelEdit","filterByCategory","clearFilter","deleteNote","noteId","delete","filter","archiveNote","updatedNote","noteIndex","watch","selectedCategory","isArchived"],"sources":["C:\\Users\\ricar\\Downloads\\Java-Otros\\frontend\\src\\components\\HelloWorld.vue"],"sourcesContent":["<template>\n  <div class=\"container-init\">\n    <div class=\"div-button-create\">\n      <button @click=\"openCreateDialog()\">New Note</button>\n    </div>\n\n    <div class=\"div-filter-categ\">\n      <div class=\"filter-text\">\n        <p>Filter by Category:</p>\n      </div>\n      <div class=\"filter-categ\">\n        <form @submit.prevent=\"filterByCategory\">\n          <input v-model=\"filterCategory\" type=\"text\" id=\"filterCategory\" required class=\"margin-categ\">\n          <button type=\"submit\" class=\"margin-categ\">Filter</button>\n        </form>\n        <button @click=\"clearFilter\" class=\"margin-categ\">Clean Filter</button>\n      </div>\n    </div>\n\n    <div class=\"div-filter-status\">\n      <div class=\"filter-text\">\n        <p>Filter by Status:</p>\n      </div>\n      <div class=\"filter-categ\">\n        <select v-model=\"selectedStatus\" @change=\"getNotes\">\n          <option value=\"all\">All Notes</option>\n          <option value=\"active\">Active</option>\n          <option value=\"archived\">Archived</option>\n        </select>\n      </div>\n    </div>\n\n    <div v-if=\"isCreateDialogVisible\" class=\"cont-form-create\">\n      <form @submit.prevent=\"createNote\" class=\"form-create\">\n        <h2>New Note</h2>\n        <label for=\"title\">Title:</label>\n        <input v-model=\"newNote.title\" type=\"text\" required>\n        <label for=\"description\">Description:</label>\n        <textarea v-model=\"newNote.description\" required></textarea>\n        <label for=\"categories\">Categories:</label>\n        <input v-model=\"newNote.categories\" type=\"text\" required>\n        <button type=\"submit\">Save</button>\n      </form>\n      <button @click=\"cancelCreate()\" class=\"button-cancel-create\">Cancel</button>\n    </div>\n  </div>\n\n  <div>    \n    <ul>\n      <li v-for=\"note in notes\" :key=\"note.idNote\">\n        <h2>{{ note.title }}</h2>\n        <p>{{ note.description }}</p>\n        <ul>\n          <li v-for=\"category in note.categories\" :key=\"category.idCategory\">\n            {{ category.nameCategory }}\n          </li>\n        </ul>\n        <p>{{ note.createdAt }}</p>\n        <button @click=\"openEditDialog(note)\">Editar</button>\n        <button @click=\"deleteNote(note.idNote)\">Eliminar</button>\n        <button @click=\"archiveNote(note.idNote)\">{{ note.archived ? 'Desarchivar' : 'Archivar' }}</button>\n      </li>\n    </ul>\n\n    <div v-if=\"isEditDialogVisible\" class=\"cont-form-create\">\n      <h2>Edit Note</h2>\n      <label for=\"editTitle\">Title:</label>\n      <input v-model=\"editNote.title\" type=\"text\" id=\"editTitle\" required>\n      <label for=\"editDescription\">Descripción:</label>\n      <textarea v-model=\"editNote.description\" id=\"editDescription\" required></textarea>\n      <label for=\"editCategories\">Categorías (Separadas por comas):</label>\n      <input v-model=\"editNote.categoriesString\" type=\"text\" id=\"editCategories\" required>\n      <button @click=\"saveEdit\">Guardar</button>\n      <button @click=\"cancelEdit\">Cancelar</button>\n    </div>\n\n  </div>\n</template>\n\n<script>\nimport { backendUrl } from '@/config.js';\nimport axios from 'axios';\nimport { ref } from 'vue';\n\nexport default {\n  data() {\n    return {\n      notes: [],\n      newNote: {\n        title: '',\n        description: '',\n        categories: '',\n      },\n      editNote: {\n        idNote: null,\n        title: '',\n        description: '',\n        categories: [],\n        categoriesString: '',\n      },\n      isEditDialogVisible: false,\n      isCreateDialogVisible: false,\n      filterCategory: '',\n      originalNotes: [],\n      selectedStatus: 'active',\n    };\n  },\n  mounted() {\n    this.getNotes();\n  },\n  methods: {\n    async openCreateDialog() {\n      try {\n        this.isCreateDialogVisible = true;\n      } catch (error) {\n        console.error('Error fetching all notes:', error);\n      }\n    },\n    cancelCreate() {\n      this.isCreateDialogVisible = false;\n      this.newNote = {\n          title: '',\n          description: '',\n          categories: '',\n        };\n    },\n    async getNotes() {\n      try {\n        let apiUrl = `${backendUrl}/api/notes-spa`;\n\n        if (this.selectedStatus === 'active' || this.selectedStatus === 'archived') {\n          apiUrl += `?status=${this.selectedStatus}`;\n        }\n\n        const response = await axios.get(apiUrl);\n        this.notes = response.data;\n        this.originalNotes = [...this.notes];\n\n      } catch (error) {\n        console.error('Error fetching all notes:', error);\n      }\n    },\n    async createNote() {\n      try {\n        const categoriesArray = this.newNote.categories.split(',').map(category => ({ nameCategory: category.trim() }))\n        const noteData = JSON.stringify({\n          title: this.newNote.title,\n          description: this.newNote.description,\n          categories: categoriesArray,\n        });\n        \n        const response = await axios.post(`${backendUrl}/api/notes-spa`,\n                                          noteData,\n                                          {headers: {'Content-Type': 'application/json', 'Accept': 'application/json'}}\n                                          );\n\n        this.notes.push(response.data);\n\n        this.newNote = {\n          title: '',\n          description: '',\n          categories: '',\n        };\n        this.isCreateDialogVisible = false;\n      } catch (error) {\n        console.error('Error creating note:', error);\n      }\n    },\n\n    // Método para abrir el componente de edición\n    async openEditDialog(note) {\n      const id = note.idNote;\n      try {\n        const response = await axios.get(`${backendUrl}/api/notes-spa/${id}/`);\n        const noteReponse = response.data;\n\n        // Asignar los valores de la nota obtenida a editNote\n        this.editNote = {\n          idNote: noteReponse.idNote,\n          title: noteReponse.title,\n          description: noteReponse.description,\n          categories: noteReponse.categories,\n          categoriesString: noteReponse.categories.map(category => category.nameCategory).join(','),\n        };\n\n        this.isEditDialogVisible = true;\n\n      } catch (error) {\n        console.error('Error fetching all notes:', error);\n      }\n    },\n    // Método para guardar la edición\n    async saveEdit() {\n      try {\n        // Actualizar el array de categorías a partir de la cadena\n        this.editNote.categories = this.editNote.categoriesString.split(',').map(category => ({ nameCategory: category.trim() }));\n\n        const noteData = JSON.stringify({\n          idNote: this.editNote.idNote,\n          title: this.editNote.title,\n          description: this.editNote.description,\n          categories: this.editNote.categories,\n        });\n\n        const response = await axios.put(`${backendUrl}/api/notes-spa`,\n                                         noteData,\n                                         {headers:{'Content-Type':'application/json','Accept':'application/json'}\n                                        });\n\n        // Actualizar la nota en la lista local\n        const updatedNoteIndex = this.notes.findIndex(note => note.idNote === this.editNote.idNote);\n        if (updatedNoteIndex !== -1) {\n          this.notes[updatedNoteIndex] = response.data;\n        }\n\n        // Después de guardar, oculta el diálogo de edición\n        this.isEditDialogVisible = false;\n      } catch (error) {\n        console.error('Error updating note:', error);\n      }\n    },\n    // Método para cancelar la edición\n    cancelEdit() {\n      this.isEditDialogVisible = false;\n    },\n\n    async filterByCategory() {\n      try {\n        const response = await axios.get(`${backendUrl}/api/notes-spa/${this.filterCategory}`);\n        this.notes = response.data;\n      } catch (error) {\n        console.error('Error fetching notes by category:', error);\n      }\n    },\n\n    // Método para limpiar el filtro y mostrar todas las notas\n    clearFilter() {\n      this.notes = [...this.originalNotes];  // Restaurar la lista original de notas\n      this.filterCategory = '';  // Limpiar el valor de la categoría de filtrado\n    },\n    \n    async deleteNote(noteId) {\n      try {\n        await axios.delete(`${backendUrl}/api/notes-spa/${noteId}`);\n        // Filtrar las notas para excluir la eliminada\n        this.notes = this.notes.filter(note => note.idNote !== noteId);\n      } catch (error) {\n        console.error('Error deleting note:', error);\n      }\n    },\n\n    async archiveNote(noteId) {\n      try {\n        const response = await axios.put(`${backendUrl}/api/notes-spa/archive/${noteId}`);\n        // Update the note in the local list with the response data\n        const updatedNote = response.data;\n        const noteIndex = this.notes.findIndex(note => note.idNote === noteId);\n\n        if (noteIndex !== -1) {\n          this.notes[noteIndex] = ref(updatedNote);\n        }\n        this.getNotes();\n      } catch (error) {\n        console.error('Error archiving/unarchiving note:', error);\n      }\n    }\n  },\n  watch: {\n    selectedCategory() {\n      this.getNotes();\n    },\n    selectedStatus() {\n      if (this.selectedStatus === 'active') {\n        this.notes = this.notes.filter(note => !note.isArchived);\n      } else if (this.selectedStatus === 'archived') {\n        this.notes = this.notes.filter(note => note.isArchived);\n      } else {\n        this.notes = this.originalNotes;\n      }\n    },\n  },\n};\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped>\nh3 {\n  margin: 40px 0 0;\n}\nul {\n  list-style-type: none;\n  padding: 0;\n}\nli {\n  display: inline-block;\n  margin: 0 10px;\n}\na {\n  color: #42b983;\n}\n\n.container-init {\n  background-color: rgb(243, 187, 150);\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  align-content: center;\n  justify-content: flex-start;\n  align-items: center;\n  padding: 30px 0px 30px 70px;\n  column-gap: 150px;\n}\n\n.div-filter-categ {\n  display: flex;\n  flex-direction: column;\n}\n\n.filter-text {\n  display: flex;\n}\n\n.filter-categ {\n  display: flex;\n}\n\n.margin-categ {\n  margin-right: 15px;\n}\n\n.cont-form-create {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  background-color: rgba(169, 177, 182, 0.932);\n  padding: 20px;\n  display: flex;\n  flex-direction: column;\n  width: 30em;\n  height: 25em;\n  border-radius: 10px;\n  box-shadow: -3px 4px 13px 2px rgb(75, 76, 77);\n}\n\n.form-create h2  {\n  font-size: 20px;\n  margin: 0px;\n  padding: 0px;\n}\n\n.form-create {\n  display: flex;\n  flex-direction: column;\n  row-gap: 15px;\n  padding: 20px;\n  text-align: left;\n}\n\n\n\n</style>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}